// See http://eslint.org/docs/rules/ for information on each rule and what may trigger it
{
  "env": {
    "amd": 2,
    "browser": true,
    "node": false
  },
  "ecmaFeatures": {
    "regexYFlag": 2,
    "regexUFlag": true
  },
  "rules": {

    // Possible Errors
    "comma-dangle": [2, "never"],
    "no-cond-assign": [2, "except-parens"],
    "no-console": 2,
    "no-constant-condition": 2,
    "no-control-regex": 2,
    "no-debugger": 2, // May want to turn this off for development purposes eventually
    "no-dupe-args": 2,
    "no-dupe-keys": 2,
    "no-duplicate-case": 2,
    "no-empty-class": 2,
    "no-empty": 2,
    "no-ex-assign": 2,
    "no-extra-boolean-cast": 2,
    "no-extra-parens": 2, // May want to turn this off eventually
    "no-extra-semi": 2,
    "no-func-assign": 2,
    "no-inner-declarations": [2, "functions"], // Check this again once fully ES6 w/o Transpiling
    "no-invalid-regexp": 2,
    "no-irregular-whitespace": 2,
    "no-negated-in-lhs": 2,
    "no-obj-calls": 2,
    "no-regex-spaces": 2,
    "no-reserved-keys": 0, // Turn on if executing in an ES4 or prior environment
    "no-sparse-arrays": 2,
    "no-unreachable": 2,
    "use-isnan": 2,
    "valid-jsdoc": 0, // Revisit this, need some form of JS documenting
    "valid-typeof": 2, // Revisit this, may need to disable this for certain frameworks, or maybe even when using ES6

    // Best Practices
    "block-scoped-var": 1,
    "complexity": 0, // Revisit this, very interesting
    "consistent-return": 2, // May want to revisit this for development purposes
    "curly": [2, "all"], // May want to revisit this for development purposes
    "default-case": 2,
    "dot-notation": [2, { "allowKeywords": true }],
    "dot-location": [2, "property"],
    "eqeqeq": [2, "smart"],
    "guard-for-in": 2,
    "no-alert": 2,
    "no-caller": 2,
    "no-div-regex": 2,
    "no-else-return": 2,
    "no-empty-label": 2,
    "no-eq-null": 2,
    "no-eval": 2,
    "no-extend-native": 2, // May need to disable this for certain polyfills and environments
    "no-extra-bind": 2,
    "no-fallthrough": 2,
    "no-floating-decimal": 2,
    "no-implied-eval": 2,
    "no-iterator": 2, // May need to disable this for certain polyfills and environments
    "no-labels": 2,
    "no-lone-blocks": 2,
    "no-loop-func": 2,
    "no-multi-spaces": 2,
    "no-multi-str": 2, // With ES6 we can now use `...` to do multi-line strings
    "no-native-reassign": 2, // May need to disable this for certain polyfills and environments
    "no-new-func": 2, // May need to disable this for certain polyfills and environments
    "no-new-wrappers": 2,
    "no-new": 2,
    "no-octal-escape": 2,
    "no-octal": 2,
    "no-param-reassign": 2,
    "no-process-env": 2, // I consider this more a node.js-specific thing, but falls under Best-practices by default
    "no-proto": 2,
    "no-redeclare": 2,
    "no-return-assign": 2,
    "no-script-url": 2,
    "no-self-compare": 2,
    "no-sequences": 2, // May want to revisit this for development purposes
    "no-throw-literal": 2,
    "no-unused-expressions": 2,
    "no-void": 2,
    "no-warning-comments": [1, {
      "terms": ["TODO", "FIXME", "PERFORMANCE"],
      "location": "start"
    }],
    "no-with": 2,
    "radix": 2, // May want to revisit this for development purposes
    "vars-on-top": 0, // May want to revisit this for development purposes
    "wrap-iife": [2, "inside"],
    "yoda": [2, "never"],

    // Strict Mode
    "strict": 2,

    // Variables
    "no-catch-shadow": 0, // If you need to support IE 8 and earlier, you should turn this rule on
    "no-delete-var": 2,
    "no-label-var": 2,
    "no-shadow-restricted-names": 2,
    "no-shadow": 2,
    "no-undef-init": 2,
    "no-undef": 1,
    "no-undefined": 2, // May want to revisit this for development purposes...should be using typeof obj === "undefined") though
    "no-unused-vars": 2,
    "no-use-before-define": 1, // May want to revisit this for development purposes

    // Node.js
    "handle-callback-err": 2, // May want to revisit this for development purposes
    "no-mixed-requires": 0, // May want to revisit this for development purposes
    "no-new-require": 2,
    "no-path-concat": 2,
    "no-process-exit": 2,
    "no-restricted-modules": 0,
    "no-sync": 2,

    // Stylistic Issues
    "brace-style": 0,
    "camelcase": 0,
    "comma-spacing": 0,
    "comma-style": 0,
    "consistent-this": 0,
    "eol-last": 0,
    "func-names": 0,
    "func-style": 0,
    "indent": 0,
    "key-spacing": 0,
    "linebreak-style": 0,
    "max-nested-callbacks": 0,
    "new-cap": 0,
    "new-parens": 0,
    "newline-after-var": 0,
    "no-array-constructor": 0,
    "no-continue": 0,
    "no-inline-comments": 0,
    "no-lonely-if": 0,
    "no-mixed-spaces-and-tabs": 0,
    "no-multiple-empty-lines": 0,
    "no-nested-ternary": 0,
    "no-new-object": 0,
    "no-spaced-func": 0,
    "no-ternary": 0,
    "no-trailing-spaces": 0,
    "no-underscore-dangle": 0,
    "no-unneeded-ternary": 0,
    "no-wrap-func": 0,
    "one-var": 0,
    "operator-assignment": 0,
    "operator-linebreak": 0,
    "padded-blocks": 0,
    "quote-props": 0,
    "quotes": 0,
    "semi-spacing": 0,
    "semi": 0,
    "sort-vars": 0,
    "space-after-keywords": 0,
    "space-before-blocks": 0,
    "space-before-function-paren": 0,
    "space-in-brackets": 0,
    "space-in-parens": 0,
    "space-infix-ops": 0,
    "space-return-throw-case": 0,
    "space-unary-ops": 0,
    "spaced-line-comment": 0,
    "wrap-regex": 0,

    // ECMAScript 6
    "generator-star-spacing": [2, "after"],
    "no-var": 0, // Need to change once running in a non-transpiled ES6 environment
    "object-shorthand": 0 // Revisit: This is very debatable, since IMO usage of object short-hand can vary based on context

  }
}